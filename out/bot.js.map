{
  "version": 3,
  "sources": ["../../src/defer.ts", "../../src/bot.ts"],
  "sourcesContent": ["export interface Deferred<T> {\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason: unknown) => void;\n  promise: Promise<T>;\n}\n\nexport function defer<T = void>(): Deferred<T> {\n  let resolve!: (value: T | PromiseLike<T>) => void;\n  let reject!: (reason: unknown) => void;\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  return { resolve, reject, promise };\n}\n", "import type { StartBotParams } from \"zilch-game-engine\";\nimport { defer } from \"./defer\";\nimport { Chess } from \"chess.js\";\n\nconst noMatch = Symbol(\"noMatch\");\nconst cancel = Symbol(\"cancel\");\n\nZilch.Bot = class Bot {\n  #params: StartBotParams;\n  #stockfish: Worker | null = null;\n  #timeUsed = 0;\n\n  constructor(params: StartBotParams) {\n    this.#params = params;\n    if (this.#params.type !== \"practice\") {\n      this.#stockfish = this.initStockfish();\n    }\n  }\n\n  async start() {\n    if (this.#params.type === \"practice\") {\n      return this;\n    }\n\n    const start = performance.now();\n\n    await this.#send(\"uci\", (data) => {\n      if (data !== \"uciok\") {\n        return noMatch;\n      }\n    });\n\n    const skilLLevel = {\n      \"boss-easy\": 0,\n      \"boss-medium\": 10,\n      \"boss-hard\": 20,\n    }[this.#params.type];\n\n    this.#send(`setoption name Skill Level value ${skilLLevel}`);\n\n    this.#timeUsed += performance.now() - start;\n\n    return this;\n  }\n\n  static async start(params: StartBotParams) {\n    return await new Bot(params).start();\n  }\n\n  async move(fen: string) {\n    const start = performance.now();\n\n    const fenParts = fen.split(\" \");\n    const turn = parseInt(fenParts[fenParts.length - 1]);\n\n    const estimatedTurnsRemaining = Math.max(1, 60 - turn);\n    const moveTimeGame =\n      (this.#params.timeLimit.game - this.#timeUsed) / estimatedTurnsRemaining;\n\n    const moveTime = Math.min(this.#params.timeLimit.move, moveTimeGame, 3000);\n\n    if (this.#params.type === \"practice\" || moveTime < 300) {\n      return this.#randomMove(fen);\n    }\n\n    this.#send(`position fen ${fen}`);\n\n    let timeoutId: NodeJS.Timeout;\n\n    const moveOperation = this.#send(\n      `go movetime ${moveTime - 200}`,\n      (result) => {\n        const parts = result.split(\" \");\n\n        if (parts[0] !== \"bestmove\") {\n          return noMatch;\n        }\n\n        clearTimeout(timeoutId);\n        return parts[1];\n      }\n    );\n\n    timeoutId = setTimeout(() => {\n      // Stop calculating after move time has elapsed\n      this.#send(\"stop\");\n      timeoutId = setTimeout(() => {\n        // If no response after 75ms cancel the move operation\n        moveOperation.cancel();\n      }, 75);\n    }, moveTime - 150);\n\n    let move = await moveOperation;\n\n    if (move === cancel) {\n      move = this.#randomMove(fen);\n    }\n\n    this.#timeUsed += performance.now() - start;\n\n    return move;\n  }\n\n  #randomMove(fen: string) {\n    const moves = new Chess(fen).moves();\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  #send<T extends (data: string) => unknown>(message: string, parse?: T) {\n    if (this.#stockfish === null) {\n      throw new Error(\n        \"Can't call send before stockfish worker is initialized.\"\n      );\n    }\n\n    const deferred = defer<unknown>();\n\n    const handleMessage = (event: MessageEvent<string>) => {\n      const result = parse?.(event.data);\n\n      if (result !== noMatch) {\n        this.#stockfish?.removeEventListener(\"message\", handleMessage);\n        deferred.resolve(result);\n      }\n    };\n\n    if (parse) {\n      this.#stockfish.addEventListener(\"message\", handleMessage);\n    } else {\n      deferred.resolve(undefined);\n    }\n\n    this.#stockfish.postMessage(message);\n\n    const promise = deferred.promise as Promise<\n      Exclude<ReturnType<T>, typeof noMatch> | typeof cancel\n    > & {\n      cancel(): void;\n    };\n\n    promise.cancel = () => {\n      deferred.resolve(cancel);\n    };\n\n    return promise;\n  }\n\n  initStockfish() {\n    const content = `importScripts(\"${ASSETS_PATH}/stockfish.js\")`;\n    const blob = new Blob([content], { type: \"text/javascript\" });\n    const url = URL.createObjectURL(blob);\n    return new Worker(url);\n  }\n};\n"],
  "mappings": "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",
  "names": ["defer", "resolve", "reject", "promise", "_resolve", "_reject", "noMatch", "cancel", "Bot", "#params", "#stockfish", "#timeUsed", "params", "start", "#send", "data", "skilLLevel", "fen", "fenParts", "turn", "estimatedTurnsRemaining", "moveTimeGame", "moveTime", "#randomMove", "timeoutId", "moveOperation", "result", "parts", "move", "moves", "Chess", "message", "parse", "deferred", "defer", "handleMessage", "event", "promise", "content", "blob", "url"]
}
